mat3 calcTBN(vec3 normal, vec3 tangent) {
  vec3 N = normalize(normal);
  vec3 T = normalize(tangent);
  vec3 B = cross(T, N);
  return mat3(T, B, N);
}

vec3 calcNormalMapping(sampler2D normalTexture, vec2 uv, mat3 TBN) {
  vec3 mapNormal = 2.0 * texture(normalTexture, uv).xyz - 0.5;
  return normalize(TBN * mapNormal);
}

vec2 calcParallaxMapping(sampler2D parallaxTexture, vec2 uv, mat3 TBN, vec3 cameraPosition, vec3 worldPosition) {
  float heightScale = 0.02;

  mat3 tTBN = transpose(TBN);

  vec3 tCamPosition = tTBN * cameraPosition;
  vec3 tWorldPosition = tTBN * worldPosition;

  vec3 viewDir = normalize(-tCamPosition - tWorldPosition);

  float minLayers = 5;
  float maxLayers = 20;
  float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), viewDir)));

  float layerDepth = 1.0 / numLayers;

  float currentLayerDepth = 0.0;

  vec2 P = viewDir.xy / viewDir.z * heightScale;
  vec2 deltaTexCoords = P / numLayers;

  vec2 currentTexCoords = uv;
  float currentDepthMapValue = 1.0 - texture(parallaxTexture, currentTexCoords).r;

  while (currentLayerDepth < currentDepthMapValue) {
    currentTexCoords -= deltaTexCoords;

    currentDepthMapValue = 1.0 - texture(parallaxTexture, currentTexCoords).r;

    currentLayerDepth += layerDepth;
  }

  vec2 prevTexCoords = currentTexCoords + deltaTexCoords;

  float afterDepth = currentDepthMapValue - currentLayerDepth;
  float beforeDepth = 1.0 - texture(parallaxTexture, prevTexCoords).r - currentLayerDepth + layerDepth;

  float weight = afterDepth / (afterDepth - beforeDepth);
  vec2 finalTexCoords = prevTexCoords * weight + currentTexCoords * (1.0 - weight);

  return finalTexCoords;
}
