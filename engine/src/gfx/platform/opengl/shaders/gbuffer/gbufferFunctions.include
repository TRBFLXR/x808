#define MIN_PARALLAX_LAYERS 3.0
#define MAX_PARALLAX_LAYERS @MAX_PARALLAX_LAYERS

mat3 calcTBN(vec3 normal, vec3 tangent) {
  vec3 N = normalize(normal);
  vec3 T = normalize(tangent);
  vec3 B = cross(T, N);
  return mat3(T, B, N);
}

vec3 calcNormalMapping(sampler2D normalTexture, vec2 uv, mat3 TBN) {
  vec3 mapNormal = 2.0 * texture(normalTexture, uv).xyz - 0.5;
  return normalize(TBN * mapNormal);
}

vec2 calcParallaxMapping(sampler2D heightMap, float heightScale, vec2 uv, mat3 TBN, vec3 cameraPosition,
                         vec3 worldPosition) {
  vec3 tCamPosition = cameraPosition * TBN;
  vec3 tWorldPosition = worldPosition * TBN;

  vec3 viewDir = normalize(tCamPosition - tWorldPosition);

  float numLayers = mix(MAX_PARALLAX_LAYERS, MIN_PARALLAX_LAYERS, abs(dot(vec3(0.0, 0.0, 1.0), viewDir)));

  float layerDepth = 1.0 / numLayers;

  viewDir *= heightScale * layerDepth / viewDir.z;

  float currLayerDepth = 0;
  vec2 prevUV = uv;
  vec2 nextUV = prevUV;
  float prevDepth = texture(heightMap, uv).r;
  float nextDepth = prevDepth;

  while (currLayerDepth < nextDepth) {
    prevUV = nextUV;
    nextUV = prevUV + viewDir.xy;

    prevDepth = nextDepth;
    nextDepth = texture(heightMap, nextUV).r;

    currLayerDepth += layerDepth;
  }

  float r1 = currLayerDepth - nextDepth;
  float r2 = prevDepth - (currLayerDepth - layerDepth);
  float r = r1 / (r1 + r2);

  return mix(nextUV, prevUV, r);
}
