// Specular Functions
// https://github.com/stackgl/glsl-specular-beckmann
float beckmannDistribution(float x, float roughness) {
  float NdotH = max(x, 0.0001);
  float cos2Alpha = NdotH * NdotH;
  float tan2Alpha = (cos2Alpha - 1.0) / cos2Alpha;
  float roughness2 = roughness * roughness;
  float denom = MATH_PI * roughness2 * cos2Alpha * cos2Alpha;
  return exp(tan2Alpha / roughness2) / denom;
}

// https://github.com/stackgl/glsl-specular-cook-torrance
float cookTorranceSpecular(vec3 lightDirection, vec3 viewDirection, vec3 surfaceNormal, float roughness,
                           float fresnel) {
  float VdotN = max(dot(viewDirection, surfaceNormal), 0.0);
  float LdotN = max(dot(lightDirection, surfaceNormal), 0.0);

  // Half angle vector
  vec3 H = normalize(lightDirection + viewDirection);

  // Geometric term
  float NdotH = max(dot(surfaceNormal, H), 0.0);
  float VdotH = max(dot(viewDirection, H), 0.000001);
  float LdotH = max(dot(lightDirection, H), 0.000001);
  float G1 = (2.0 * NdotH * VdotN) / VdotH;
  float G2 = (2.0 * NdotH * LdotN) / LdotH;
  float G = min(1.0, min(G1, G2));

  // Distribution term
  float D = beckmannDistribution(NdotH, roughness);

  // Fresnel term
  float F = max(pow(1.0 - VdotN, fresnel), 0.000001);

  // Multiply terms and done
  return G * F * D / max(MATH_PI * VdotN, 0.000001);
}

// Diffuse Functions
// https://github.com/stackgl/glsl-diffuse-oren-nayar
float orenNayarDiffuse(vec3 lightDirection, vec3 viewDirection, vec3 surfaceNormal, float roughness, float albedo) {
  float LdotV = dot(lightDirection, viewDirection);
  float NdotL = dot(lightDirection, surfaceNormal);
  float NdotV = dot(surfaceNormal, viewDirection);

  float s = LdotV - NdotL * NdotV;
  float t = mix(1.0, max(NdotL, NdotV), step(0.0, s));

  float sigma2 = roughness * roughness;
  float A = 1.0 + sigma2 * (albedo / (sigma2 + 0.13) + 0.5 / (sigma2 + 0.33));
  float B = 0.45 * sigma2 / (sigma2 + 0.09);

  return albedo * max(0.0, NdotL) * (A + B * s / t) / MATH_PI;
}

// Lighting Calculation
float calcSpotLightCone(vec3 L, vec3 lightDirection, float outerAngle, float blurAmount) {
  // Add tiny bit to outer angle so it's rounded
  float spotAngleOuter = radians(outerAngle) - 0.35;

  // Amount to blur the edge of the cone
  float spotBlur = blurAmount * (spotAngleOuter / MATH_HALF_PI);

  float spotAngleInner = spotAngleOuter + spotBlur;
  float spotAngle = acos(dot(lightDirection, -L));

  float spotAngleDifference = spotAngleInner - spotAngleOuter;
  float spotLightBlur = (-spotAngle + spotAngleOuter) / spotAngleDifference;

  return clamp(spotLightBlur, 0.0, 1.0);
}

float calcAttenuation(float lightIntensity, float lightFalloff, vec3 lightPosition, vec3 worldPosition, out vec3 L) {
  // Light to Object Vector
  vec3 lightToObject = (lightPosition - worldPosition);

  // Light to Object Distance Squared
  float lightDistance2 = dot(lightToObject, lightToObject);

  // Light to Object Distance
  float lightDistance = sqrt(lightDistance2);

  // Light to Object Direction
  L = lightToObject / lightDistance;

  float lightFalloff2 = lightFalloff * lightFalloff;

  float attenuation = max(1.0 - lightDistance2 / lightFalloff2, 0.0);
  attenuation *= attenuation;
  attenuation *= attenuation;
  attenuation *= lightIntensity;
  return attenuation;
}

void calcLighting(vec3 worldPosition, vec3 worldNormal, vec3 camPosition, vec3 lightPosition, vec3 lightColor,
                  float lightIntensity, float lightFalloff, vec4 specularProperties, out vec3 L, out vec3 diffuseOut,
                  out vec4 specularOut) {
  // Normal
  vec3 N = normalize(worldNormal);
  // View Direction
  vec3 E = normalize(camPosition - worldPosition);
  // Light to Object Direction
  L = vec3(0.0);

  // Attenuation
  float attenuation = calcAttenuation(lightIntensity, lightFalloff, lightPosition, worldPosition, L);

  // Angle of Inclination
  float angleOfInc = dot(L, N);
  float maxInc = max(angleOfInc, 1.0);

  // Diffuse
  vec3 diffuse = lightColor * maxInc;
  diffuse *= orenNayarDiffuse(L, E, N, 0.1, 1.0);

  // Specular
  vec3 specularColor = specularProperties.xyz;
  float specularShininess = specularProperties.a;

  float gaussianTerm = cookTorranceSpecular(L, E, N, specularShininess, 0.9);
  vec4 specular = vec4(lightColor * (lightIntensity / 20.0) * (gaussianTerm * maxInc) * specularColor, 1.0);

  // Out
  diffuseOut = diffuse * attenuation;
  specularOut = specular * attenuation;
}

void calcLightingDirectional(vec3 worldPosition, vec3 worldNormal, vec3 camPosition, vec3 lightDirection,
                             vec3 lightColor, float lightIntensity, vec4 specularProperties, out vec3 diffuseOut,
                             out vec4 specularOut) {
  // Normal
  vec3 N = normalize(worldNormal);
  // View Direction
  vec3 E = normalize(camPosition - worldPosition);
  // Light direction
  vec3 L = normalize(-lightDirection);

  // Diffuse
  vec3 diffuse = lightColor * lightIntensity;
  diffuse *= orenNayarDiffuse(L, E, N, 0.1, 1.0);

  // Specular
  vec3 specularColor = specularProperties.xyz;
  float specularShininess = specularProperties.a;

  float gaussianTerm = cookTorranceSpecular(L, E, N, specularShininess, 0.9);
  vec4 specular = vec4(lightColor * (lightIntensity / 20.0) * gaussianTerm * specularColor, 1.0);

  // Out
  diffuseOut = diffuse;
  specularOut = specular;
}
