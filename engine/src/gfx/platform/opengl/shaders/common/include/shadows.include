#define SHADOW_QUALITY @SHADOW_QUALITY

#if SHADOW_QUALITY > 3
#error SHADOW_QUALITY max 3
#endif

#if SHADOW_QUALITY < 2
#define NUM_SAMPLES 0.0
#elif SHADOW_QUALITY == 2
#define NUM_SAMPLES 5.0
#elif SHADOW_QUALITY == 3
#define NUM_SAMPLES 10.0
#endif

#define MAX_VARIANCE 0.03
#define BLEED_REDUCE 0.6
#define SAMPLES_START ((NUM_SAMPLES - 1.0) / 2.0)
#define NUM_SAMPLES_SQUARED (NUM_SAMPLES * NUM_SAMPLES)

float linstep(float min, float max, float v) { return clamp((v - min) / (max - min), 0.0, 1.0); }

float reduceLightBleeding(float pmax, float amount) { return linstep(amount, 1.0, pmax); }

float chebyshevUpperBound(vec2 moments, float t) {
  // Surface is fully lit if the current fragment is before the light occluder
  if (t >= (moments.x)) return 1.0;

  // Compute variance.
  float variance = moments.y - moments.x * moments.x;
  variance = max(variance, MAX_VARIANCE);

  // Compute probabilistic upper bound.
  float d = t - moments.x;

  return variance / (variance + d * d);
}

float shadowContributionSpot(vec3 uv, float distanceToLight, sampler2DArray shadowMap) {
  vec2 moments = texture(shadowMap, uv).xy;
  float pmax = chebyshevUpperBound(moments, distanceToLight);
  return reduceLightBleeding(pmax, BLEED_REDUCE);
}

float sampleShadowMap(sampler2DArray shadowMap, vec2 uv, int layer, float compare) {
  return step(compare, texture(shadowMap, vec3(uv, layer)).r);
}

float sampleShadowMapPCF(sampler2DArray shadowMap, vec2 uv, int layer, float compare, vec2 texelSize) {
  float result = 0.0;
  for (float y = -SAMPLES_START; y <= SAMPLES_START; y += 1.0) {
    for (float x = -SAMPLES_START; x <= SAMPLES_START; x += 1.0) {
      vec2 offset = vec2(x, y) * texelSize;
      result += sampleShadowMap(shadowMap, uv + offset, layer, compare);
    }
  }
  // return result / NUM_SAMPLES_SQUARED;
  return reduceLightBleeding(result / NUM_SAMPLES_SQUARED, BLEED_REDUCE / 2.0);
}

float calcShadow(sampler2DArray shadowMap, vec2 uv, int layer, float compare, vec2 texelSize) {
#if SHADOW_QUALITY == 1
  return shadowContributionSpot(vec3(uv, layer), compare, shadowMap);
#else
  return 1.0 - sampleShadowMapPCF(shadowMap, uv, layer, compare, texelSize);
#endif
}
