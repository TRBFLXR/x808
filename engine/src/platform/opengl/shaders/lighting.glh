R"(
uniform vec3 sys_EyePos;
uniform float sys_SpecularIntensity;
uniform float sys_SpecularPower;

struct DirectionalLight {
  vec4 color;
  float intensity;

  vec3 direction;
};

struct PointLight {
  vec4 color;
  float intensity;

  float constant;
  float linear;
  float exponent;

  vec3 position;
  float range;
};

struct SpotLight {
  vec3 direction;
  float cutoff;
};

vec4 CalcLightInternal(vec4 color, float intensity, vec3 direction, vec3 normal, vec3 worldPos) {
  float diffuseFactor = dot(normal, -direction);

  vec4 diffuseColor = vec4(0, 0, 0, 0);
  vec4 specularColor = vec4(0, 0, 0, 0);

  if (diffuseFactor > 0) {
    diffuseColor = color * intensity * diffuseFactor;

    vec3 directionToEye = normalize(sys_EyePos - worldPos);
    // vec3 reflectDirection = normalize(reflect(direction, normal));
    vec3 halfDirection = normalize(directionToEye - direction);

    float specularFactor = dot(halfDirection, normal);
    // float specularFactor = dot(directionToEye, reflectDirection);
    specularFactor = pow(specularFactor, sys_SpecularPower);

    if (specularFactor > 0) {
      specularColor = color * sys_SpecularIntensity * specularFactor;
    }
  }

  return diffuseColor + specularColor;
}

vec4 CalcDirectionalLight(DirectionalLight light, vec3 normal, vec3 worldPos) {
  return CalcLightInternal(light.color, light.intensity, light.direction, normal, worldPos);
}

vec4 CalcPointLight(PointLight light, vec3 normal, vec3 worldPos) {
  vec3 lightDirection = worldPos - light.position;
  float distanceToPoint = length(lightDirection);

  if (distanceToPoint > light.range) return vec4(0, 0, 0, 0);

  lightDirection = normalize(lightDirection);

  vec4 lightColor = CalcLightInternal(light.color, light.intensity, lightDirection, normal, worldPos);

  float attenuation =
      light.constant + light.linear * distanceToPoint + light.exponent * distanceToPoint * distanceToPoint + 0.0001;

  return lightColor / attenuation;
}

vec4 CalcSpotLight(PointLight pointLight, SpotLight spotLight, vec3 normal, vec3 worldPos) {
  vec3 lightDirection = normalize(worldPos - pointLight.position);
  float spotFactor = dot(lightDirection, spotLight.direction);

  vec4 color = vec4(0, 0, 0, 0);

  if (spotFactor > spotLight.cutoff) {
    color = CalcPointLight(pointLight, normal, worldPos) * (1.0 - (1.0 - spotFactor) / (1.0 - spotLight.cutoff));
  }

  return color;
}
)"
