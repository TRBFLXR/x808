uniform float fxaaSpanMax;
uniform float fxaaReduceMin;
uniform float fxaaReduceMul;

vec3 fxaa(sampler2D sampler, vec2 uv) {
  vec2 textureSize = textureSize(sampler, 0).xy;

  vec3 rgbNW = texture(sampler, uv + (vec2(-1.0, -1.0) / textureSize)).xyz;
  vec3 rgbNE = texture(sampler, uv + (vec2(1.0, -1.0) / textureSize)).xyz;
  vec3 rgbSW = texture(sampler, uv + (vec2(-1.0, 1.0) / textureSize)).xyz;
  vec3 rgbSE = texture(sampler, uv + (vec2(1.0, 1.0) / textureSize)).xyz;
  vec3 rgbM = texture(sampler, uv).xyz;

  vec3 luma = vec3(0.299, 0.587, 0.114);
  float lumaNW = dot(rgbNW, luma);
  float lumaNE = dot(rgbNE, luma);
  float lumaSW = dot(rgbSW, luma);
  float lumaSE = dot(rgbSE, luma);
  float lumaM = dot(rgbM, luma);

  float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
  float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));

  vec2 dir;
  dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
  dir.y = ((lumaNW + lumaSW) - (lumaNE + lumaSE));

  float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * fxaaReduceMul), fxaaReduceMin);

  float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);

  dir = min(vec2(fxaaSpanMax, fxaaSpanMax), max(vec2(-fxaaSpanMax, -fxaaSpanMax), dir * rcpDirMin)) / textureSize;

  vec3 rgbA = (0.5) * (texture(sampler, uv.xy + dir * (1.0 / 3.0 - 0.5)).xyz +
                       texture(sampler, uv.xy + dir * (2.0 / 3.0 - 0.5)).xyz);

  vec3 rgbB = rgbA * (0.5) + (0.25) * (texture(sampler, uv.xy + dir * (0.0 / 3.0 - 0.5)).xyz +
                                       texture(sampler, uv.xy + dir * (3.0 / 3.0 - 0.5)).xyz);
  float lumaB = dot(rgbB, luma);

  vec3 final = vec3(0.0);
  if ((lumaB < lumaMin) || (lumaB > lumaMax)) {
    final = rgbA;
  } else {
    final = rgbB;
  }

  return final;
}
